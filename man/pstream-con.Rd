% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/pipestreamr.R
\docType{methods}
\name{pstream_input_con}
\alias{flush,pstream_output_con-method}
\alias{pstream_input_con}
\alias{pstream_output_con}
\title{Pipe stream connections objects}
\usage{
pstream_input_con(stream, timeout = 5, stderr = FALSE)

pstream_output_con(stream, send_eof = FALSE)

\S4method{flush}{pstream_output_con}(con)
}
\arguments{
\item{stream}{a pstream object}

\item{stderr}{read from stderr?}

\item{send_eof}{write EOF after sending message?}

\item{con}{a pstream connection object}
}
\value{
a \code{\link{textConnection}} object
}
\description{
Open an R connection object for reading or writing to process
}
\details{
R's \code{\link{connections}} objects provide uniform access to a variety
of IO modes. These function build \code{\link{textConnection}} object that
read or write to a pstream. An input connection simply reads from stdout,
or optionally stderr, and then returns that text when the connection is
read. Note that the reading happens at the time of creation.

You must call \code{\link{flush}} on an output connection or nothing
will get written to the processes standard input. Because these objects
are \code{\link{textConnection}}s, they cannot be used repeatedly.
Always initialize a new connection for each use.
}
\examples{
x = pstream("R", "--vanilla --slave")
c1 = pstream_output_con(x)
writeLines("R.Version()[[1]]", c1)
flush(c1)                # required
c2 = pstream_input_con(x)
cat(readLines(c2))
pstream_close(x)

x = pstream("R", "--vanilla --slave")
a = 1:3
x \%<<\% "a = unserialize(stdin())"
c1 = pstream_output_con(x)
serialize(a, c1)
flush(c1)                   # required
x \%<<\% "serialize(a, stdout())"
c2 = pstream_input_con(x)
cat(unserialize(c2))
pstream_close(x)
}

