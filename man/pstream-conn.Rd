% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/rpstreams.R
\name{pstream_input_conn}
\alias{pstream_input_conn}
\alias{pstream_output_conn}
\title{Rpstreams connections objects}
\usage{
pstream_input_conn(stream, stderr = FALSE)

pstream_output_conn(stream, send_eof = FALSE)
}
\arguments{
\item{stream}{a pstream object}

\item{stderr}{read from stderr?}

\item{send_eof}{write EOF after sending message?}
}
\value{
\code{pstream_input_conn:} a \code{\link{textConnection}} object
\code{pstream_output_conn:} output connection is a list with two elements: \code{conn} that
contains the connection object and \code{flush}, which is a function that
writes the data to the pstream. Pass the \code{conn} element to function that
operate on connections and then call \code{flush}.
}
\description{
Open an R connection object for reading or writing to process
}
\details{
R's \code{\link{connections}} objects provide uniform access to a variety
of IO modes. These function build \code{\link{textConnection}} object that
read or write to a pstream. An input connection simply reads from stdout,
or optionally stderr, and then returns that text when the connection is
read. Note that the reading happens at the time of creation.
}
\examples{
# The examples environment appears to bind stdout
# so the output is suppressed. This works typed
# into an R session.
\dontrun{
x = pstream("R", "--vanilla --slave")
c1 = pstream_output_conn(x)
writeLines("R.Version()", c1$conn)
c1$flush()
c2 = pstream_input_conn(x)
readLines(c2)
pstream_close(x)

# send and retreive an R object
# works in regular R session
x = pstream("R", "--vanilla --slave")
a = 1:3
write_stdin(x, "a = unserialize(stdin())")
c1 = pstream_output_conn(x)
serialize(a, c1$conn)
c1$flush()
write_stdin(x, "serialize(a, stdout())")
c2 = pstream_input_conn(x)
unserialize(c2)
pstream_close(x)
}
}

