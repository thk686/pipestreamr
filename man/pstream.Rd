% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/rpstreams.R
\name{pstream}
\alias{close.pstream}
\alias{open.pstream}
\alias{pstream}
\alias{pstream_close}
\alias{send_eof}
\alias{set_buffer_soze}
\alias{set_max_reads}
\alias{set_read_formatter}
\alias{set_write_formatter}
\alias{signal}
\title{Open a pipe stream object}
\usage{
pstream(command, args = "", read_formatter = function(x) x,
  write_formatter = function(x) as.character(x), bufsz = 1024,
  max_reads = 1024)

set_read_formatter(stream, func)

set_write_formatter(stream, func)

set_buffer_soze(stream, bufsz)

set_max_reads(stream, max_reads)

pstream_close(stream, wait = 10)

\method{close}{pstream}(con, ...)

\method{open}{pstream}(con, ...)

send_eof(stream)

signal(stream, signal = 15, group = FALSE)
}
\arguments{
\item{command}{the program to run}

\item{args}{a vector of argument strings}

\item{read_formatter}{formatter function when reading}

\item{write_formatter}{formatter function when writing}

\item{bufsz}{size of the read buffer}

\item{max_reads}{maximum number of buffer fills}

\item{stream}{a pstream object}

\item{func}{a formatter function}

\item{wait}{number of seconds to wait before sending the kill signal}

\item{con}{a pstream object}

\item{...}{ignored}

\item{signal}{the POSIX signal number (see \code{kill -l})}

\item{group}{signal the entire process group?}
}
\description{
Opens a set of pipes to stdin, stdout and stderr for
on the specified process.
}
\details{
Closing a stream will wait until the spawned process completes. This
can hang your session if the process is not well-behaved. You should manually
end the proces if possible. \code{pstream_close} will check whether the program
has exited. If it is still running, EOF is sent. The process is then
checked for \code{wait} seconds.
If the process does not exit during that period, then SIGTERM signal is sent. If
after another round of waiting, the process has not existed, it is then sent
the SIGKILL signal. After that, the stream is manually closed.
}
\examples{
x = pstream("R")
status(x)
read_stderr(x)
pstream_close(x)

x = pstream("R", "--vanilla")
read_stdout(x)
write_stdin(x, "R.Version()")
read_stdout(x)
send_eof(x); Sys.sleep(1)
status(x)

x = pstream("R", "--vanilla")
status(x)
signal(x); Sys.sleep(1)
status(x)

x = pstream("R", "--vanilla")
status(x)
close(x)
status(x)

wf = function(x) "dir()"
rf = function(x) "Boo!"
x = pstream("R", "--vanilla --slave", rf, wf)
write_stdin(x, "q()")
read_stdout(x)
close(x)
}

